% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\name{POST_query}
\alias{POST_query}
\title{Use the POST protocol to execute a graph database query}
\usage{
POST_query(options, repo_id, query, results_format = "CSV",
  query_ln = "SPARQL", infer = TRUE, varbindings, timeout = "")
}
\arguments{
\item{options}{a list returned by \code{create_server_options}.}

\item{repo_id}{a string holding the repository id as returned by \code{get_repositories}.}

\item{results_format}{a string, indicating the type of results required. Currently supported: "XML", "CSV".}

\item{infer}{a boolean, indicating whether we want to use inference.}

\item{varbindings}{currently unused}

\item{timeout}{currently unused}

\item{query_language}{a string: "SPARQL" or "SERQL" (untested)}
}
\value{
If \code{results_format} is "XML", the return value is an XML string containing the output of the , ready to be parsed as a document.
                           If "CSV" is specified, the return variable is already parsed as a data.frame.
}
\description{
This function is very similar to \code{GET_query}; the difference is that
while \code{GET_query} submits the SPARQL/SERQL query to the database endpoint
via the GET protocol, \code{POST_query} submits it via the POST protocol.
}
\note{
This function was tested both on GraphDB standalone and on Ontotext S4.
}
\examples{
\dontrun{r = POST_query( options, "plazi", query, "CSV" )}
\dontrun{r = POST_query( options, "plazi", query, "XML" )}
}

